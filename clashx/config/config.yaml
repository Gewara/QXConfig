#---------------------------------------------------#
## @Author: Benster 
## @Date: 2022-05-24 15:09:26 
## @Last Modified by:   Benster 
## @Last Modified time: 2022-05-24 15:09:26 
## updateUrl: https://raw.githubusercontent.com/Gewara/QXConfig/main/clashx/config/config.yaml
#---------------------------------------------------#

# (HTTP and SOCKS5 in one port)
# mixed-port: 7890

# HTTP 代理端口
port: 7890 

# SOCKS5 代理端口
socks-port: 7891 

# Linux 和 macOS 的 redir 代理端口
redir-port: 7892 

# 允许局域网的连接（可用来共享代理）
allow-lan: true
mode: rule
log-level: warning
external-controller: 127.0.0.1:9090
cfw-latency-url: http://www.google.com/generate_204

# RESTful API 的口令
secret: ''

proxies:

proxy-groups:
  - { name: Proxy, type: select, proxies: ["Auto - UrlTest", "本地节点"] }
  - { name: AdBlock, type: select, proxies: ["REJECT", "Proxy", "DIRECT"] }
  - { name: Speedtest, type: select, proxies: ["Proxy", "DIRECT"] }
  - { name: Apple, type: select, proxies: ["DIRECT", "Proxy"] }
  - { name: Microsoft, type: select, proxies: ["DIRECT", "Proxy"] }
  - { name: Spotify, type: select, proxies: ["Auto - Media", "Proxy", "DIRECT"] }
  - { name: Media, type: select, proxies: ["Auto - Media", "Proxy", "DIRECT"] }
  - {
      name: Auto - UrlTest,
      type: url-test,
      url: "https://www.google.com/generate_204",
      interval: 3600,
      proxies: []
    }
  - {
      name: Auto - Media,
      type: url-test,
      url: "https://www.youtube.com/",
      interval: 1800,
      proxies: []
    }

rules:
  - DOMAIN,clash.razord.top,DIRECT
  - DOMAIN,yacd.haishan.me,DIRECT
  - RULE-SET,reject,REJECT
  - RULE-SET,Reject,AdBlock
  - RULE-SET,Netflix,Media
  - RULE-SET,Spotify,Spotify
  - RULE-SET,YouTube,Media
  - RULE-SET,Disney Plus,Media
  - RULE-SET,ABC,Media
  - RULE-SET,Abema TV,Media
  - RULE-SET,Amazon,Media
  - RULE-SET,Apple News,Media
  - RULE-SET,Apple TV,Media
  - RULE-SET,Bahamut,Media
  - RULE-SET,BBC iPlayer,Media
  - RULE-SET,DAZN,Media
  - RULE-SET,Discovery Plus,Media
  - RULE-SET,encoreTVB,Media
  - RULE-SET,Fox Now,Media
  - RULE-SET,Fox+,Media
  - RULE-SET,HBO Go,Media
  - RULE-SET,HBO Max,Media
  - RULE-SET,Hulu Japan,Media
  - RULE-SET,Hulu,Media
  - RULE-SET,Japonx,Media
  - RULE-SET,JOOX,Media
  - RULE-SET,KKBOX,Media
  - RULE-SET,KKTV,Media
  - RULE-SET,Line TV,Media
  - RULE-SET,myTV SUPER,Media
  - RULE-SET,Pandora,Media
  - RULE-SET,PBS,Media
  - RULE-SET,Pornhub,Media
  - RULE-SET,Soundcloud,Media
  - RULE-SET,ViuTV,Media
  - RULE-SET,applications,DIRECT
  - RULE-SET,private,DIRECT
  - RULE-SET,tld-not-cn,Proxy
  - RULE-SET,gfw,Proxy
  - RULE-SET,am-proxy,Proxy
  - RULE-SET,greatfire,Proxy
  - RULE-SET,telegramcidr,Proxy
  - RULE-SET,Speedtest,Speedtest
  - RULE-SET,Microsoft,Microsoft
  - RULE-SET,Apple,Apple
  - RULE-SET,LAN,DIRECT
  - MATCH,DIRECT

rule-providers:
  reject:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/reject.txt"
    path: ./ruleset/reject.yaml
    interval: 86400
  icloud:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/icloud.txt"
    path: ./ruleset/icloud.yaml
    interval: 86400
  Apple:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/apple.txt"
    path: ./ruleset/apple.yaml
    interval: 86400
  google:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/google.txt"
    path: ./ruleset/google.yaml
    interval: 86400
  proxy:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/proxy.txt"
    path: ./ruleset/proxy.yaml
    interval: 86400
  private:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/private.txt"
    path: ./ruleset/private.yaml
    interval: 86400
  gfw:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/gfw.txt"
    path: ./ruleset/gfw.yaml
    interval: 86400
  am-proxy:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Gewara/QXConfig/main/clashx/rules/AMProxy.txt"
    path: ./ruleset/am-proxy.yaml
    interval: 86400
  greatfire:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/greatfire.txt"
    path: ./ruleset/greatfire.yaml
    interval: 86400
  tld-not-cn:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/tld-not-cn.txt"
    path: ./ruleset/tld-not-cn.yaml
    interval: 86400
  telegramcidr:
    type: http
    behavior: ipcidr
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/telegramcidr.txt"
    path: ./ruleset/telegramcidr.yaml
    interval: 86400
  applications:
    type: http
    behavior: classical
    url: "https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt"
    path: ./ruleset/applications.yaml
    interval: 86400
  Reject:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Reject.yaml
    path: ./Rules/Reject
    interval: 86400
  Microsoft:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Microsoft.yaml
    path: ./Rules/Microsoft
    interval: 86400
  Speedtest:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Speedtest.yaml
    path: ./Rules/Speedtest
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/LAN.yaml
    path: ./Rules/LAN
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Netflix.yaml
    path: ./Rules/Media/Netflix
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Spotify.yaml
    path: ./Rules/Media/Spotify
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/YouTube.yaml
    path: ./Rules/Media/YouTube
    interval: 86400
  ABC:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/ABC.yaml
    path: ./Rules/Media/ABC
    interval: 86400
  Abema TV:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Abema%20TV.yaml
    path: ./Rules/Media/Abema_TV
    interval: 86400
  Amazon:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Amazon.yaml
    path: ./Rules/Media/Amazon
    interval: 86400
  Apple News:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Apple%20News.yaml
    path: ./Rules/Media/Apple_News
    interval: 86400
  Apple TV:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Apple%20TV.yaml
    path: ./Rules/Media/Apple_TV
    interval: 86400
  Bahamut:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Bahamut.yaml
    path: ./Rules/Media/Bahamut
    interval: 86400
  BBC iPlayer:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/BBC%20iPlayer.yaml
    path: ./Rules/Media/BBC_iPlayer
    interval: 86400
  DAZN:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/DAZN.yaml
    path: ./Rules/Media/DAZN
    interval: 86400
  Discovery Plus:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Discovery%20Plus.yaml
    path: ./Rules/Media/Discovery_Plus
    interval: 86400
  Disney Plus:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Disney%20Plus.yaml
    path: ./Rules/Media/Disney_Plus
    interval: 86400
  encoreTVB:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/encoreTVB.yaml
    path: ./Rules/Media/encoreTVB
    interval: 86400
  Fox Now:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Fox%20Now.yaml
    path: ./Rules/Media/Fox_Now
    interval: 86400
  Fox+:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Fox%2B.yaml
    path: ./Rules/Media/Fox+
    interval: 86400
  HBO Go:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/HBO%20Go.yaml
    path: ./Rules/Media/HBO_Go
    interval: 86400
  HBO Max:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/HBO%20Max.yaml
    path: ./Rules/Media/HBO_Max
    interval: 86400
  Hulu Japan:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Hulu%20Japan.yaml
    path: ./Rules/Media/Hulu_Japan
    interval: 86400
  Hulu:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Hulu.yaml
    path: ./Rules/Media/Hulu
    interval: 86400
  Japonx:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Japonx.yaml
    path: ./Rules/Media/Japonx
    interval: 86400
  JOOX:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/JOOX.yaml
    path: ./Rules/Media/JOOX
    interval: 86400
  KKBOX:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/KKBOX.yaml
    path: ./Rules/Media/KKBOX
    interval: 86400
  KKTV:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/KKTV.yaml
    path: ./Rules/Media/KKTV
    interval: 86400
  Line TV:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Line%20TV.yaml
    path: ./Rules/Media/Line_TV
    interval: 86400
  myTV SUPER:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/myTV%20SUPER.yaml
    path: ./Rules/Media/myTV_SUPER
    interval: 86400
  Pandora:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Pandora.yaml
    path: ./Rules/Media/Pandora
    interval: 86400
  PBS:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/PBS.yaml
    path: ./Rules/Media/PBS
    interval: 86400
  Pornhub:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Pornhub.yaml
    path: ./Rules/Media/Pornhub
    interval: 86400
  Soundcloud:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/Soundcloud.yaml
    path: ./Rules/Media/Soundcloud
    interval: 86400
  ViuTV:
    type: http
    behavior: classical
    url: https://dler.cloud/Rules/Clash/Provider/Media/ViuTV.yaml
    path: ./Rules/Media/ViuTV
    interval: 86400

script:
  code: |
    def main(ctx, metadata):
        ruleset_action = {
            "Netflix": "Netflix",
            "Spotify": "Spotify",
            "YouTube": "YouTube",
            "Disney Plus": "Media",
            "ABC": "Media",
            "Abema TV": "Media",
            "Amazon": "Media",
            "Apple News": "Media",
            "Apple TV": "Media",
            "Bahamut": "Media",
            "BBC iPlayer": "Media",
            "DAZN": "Media",
            "Discovery Plus": "Media",
            "encoreTVB": "Media",
            "Fox Now": "Media",
            "Fox+": "Media",
            "HBO Go": "Media",
            "HBO Max": "Media",
            "Hulu Japan": "Media",
            "Hulu": "Media",
            "Japonx": "Media",
            "JOOX": "Media",
            "KKBOX": "Media",
            "KKTV": "Media",
            "Line TV": "Media",
            "myTV SUPER": "Media",
            "Pandora": "Media",
            "PBS": "Media",
            "Pornhub": "Media",
            "Soundcloud": "Media",
            "ViuTV": "Media",
            "Apple": "Apple",
            "Reject": "AdBlock",
            "reject": "REJECT",
            "private": "DIRECT",
            "applications": "DIRECT",
            "Microsoft": "Microsoft",
            "tld-not-cn": "Proxy",
            "gfw": "Proxy",
            "am-proxy": "Proxy",
            "greatfire": "Proxy",
            "telegramcidr": "Proxy",
            "Speedtest": "Speedtest",
            "LAN": "DIRECT"
          }

        port = int(metadata["dst_port"])

        if metadata["network"] == "UDP":
            if port == 443:
                ctx.log('[Script] matched QUIC traffic use reject')
                return "REJECT"

        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        if port not in port_list:
            ctx.log('[Script] not common port use direct')
            return "DIRECT"

        if metadata["dst_ip"] == "":
            metadata["dst_ip"] = ctx.resolve_ip(metadata["host"])

        for ruleset in ruleset_action:
            if ctx.rule_providers[ruleset].match(metadata):
                return ruleset_action[ruleset]

        if metadata["dst_ip"] == "":
            return "DIRECT"

        code = ctx.geoip(metadata["dst_ip"])
        if code == "CN":
            ctx.log('[Script] Geoip CN')
            return "DIRECT"

        ctx.log('[Script] FINAL')
        return "DIRECT"